#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Offender form for adding/editing offender information.
"""

from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QLineEdit, QComboBox, QDateEdit,
    QPushButton, QLabel, QGroupBox, QHBoxLayout, QSpinBox, 
    QTextEdit, QGridLayout, QMessageBox, QScrollArea, QFrame,
    QGraphicsDropShadowEffect, QSizePolicy, QCompleter, QFileDialog,
    QInputDialog
)
from PyQt6.QtCore import pyqtSignal, QDate, Qt, QStringListModel
from PyQt6.QtGui import QFont, QPixmap, QColor
import os
from typing import Dict, Any, Optional
import json
import pandas as pd
import pytesseract
from PIL import Image
import pdfplumber
import docx
from autocorrect import Speller
from underthesea import ner
from fuzzywuzzy import process

from constants import COMPONENT_SIZES
from models.offender import Offender, Gender, CaseType
from services.offender_service import OffenderService


class OffenderForm(QWidget):
    """Form for adding/editing offender information."""
    
    # Signals
    offender_saved = pyqtSignal(int)  # Emits offender ID when saved
    offender_cancelled = pyqtSignal()
    
    def __init__(self, offender_service: OffenderService, parent=None):
        """Initialize offender form."""
        super().__init__(parent)
        self.offender_service = offender_service
        self.current_offender_id: Optional[int] = None
        self.setup_ui()
        self.setup_connections()
        
    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(12, 12, 12, 12)
        main_layout.setSpacing(10)
        self.setup_header(main_layout)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameShape(QFrame.Shape.NoFrame)
        scroll_area.setVerticalScrollBarPolicy(
            Qt.ScrollBarPolicy.ScrollBarAsNeeded
        )
        scroll_area.setHorizontalScrollBarPolicy(
            Qt.ScrollBarPolicy.ScrollBarAlwaysOff
        )
        scroll_area.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding
        )
        form_widget = QWidget()
        form_widget.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding
        )
        form_layout = QVBoxLayout(form_widget)
        form_layout.setContentsMargins(12, 12, 12, 12)
        form_layout.setSpacing(10)
        self.setup_basic_info_section(form_layout)
        self.setup_case_info_section(form_layout)
        self.setup_sentence_info_section(form_layout)
        self.setup_calculation_section(form_layout)
        self.setup_notes_section(form_layout)
        form_layout.addStretch()  # ƒê·∫£m b·∫£o co gi√£n full chi·ªÅu d·ªçc
        scroll_area.setWidget(form_widget)
        main_layout.addWidget(scroll_area)
        self.setup_action_bar(main_layout)
        self.case_number_edit.setFocus()  # Auto-focus tr∆∞·ªùng ƒë·∫ßu ti√™n
        
    def setup_header(self, parent_layout):
        """Setup header section."""
        header_frame = QFrame()
        header_frame.setObjectName("header")
        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(30, 20, 30, 20)
        icon_label = QLabel()
        icon_pixmap = QPixmap("assets/logo_cand.png")
        if not icon_pixmap.isNull():
            icon_pixmap = icon_pixmap.scaled(40, 40, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
            icon_label.setPixmap(icon_pixmap)
        else:
            icon_label.setText("üèõÔ∏è")
            icon_label.setFont(QFont("Segoe UI", 24))
        title_label = QLabel("NH·∫¨P TH√îNG TIN ƒê·ªêI T∆Ø·ª¢NG THI H√ÄNH √ÅN")
        title_label.setFont(QFont("Segoe UI", 18, QFont.Weight.Bold))
        title_label.setObjectName("headerTitle")  # ƒê·∫£m b·∫£o nh·∫≠n QSS ƒë·ªông
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        parent_layout.addWidget(header_frame)
        
    def setup_basic_info_section(self, parent_layout):
        """Setup basic information section."""
        section = self.create_section("üë§ TH√îNG TIN C∆† B·∫¢N", parent_layout)
        layout = QGridLayout(section)
        layout.setSpacing(15)
        
        # Row 1
        layout.addWidget(self.create_label("S·ªë h·ªì s∆° *"), 0, 0)
        self.case_number_edit = self.create_input("VD: 40CE0625/405LF")
        layout.addWidget(self.case_number_edit, 0, 1)
        self.case_number_error = QLabel()
        self.case_number_error.setObjectName("errorLabel")
        self.case_number_error.setVisible(False)
        layout.addWidget(self.case_number_error, 1, 1)
        
        layout.addWidget(self.create_label("H·ªç v√† t√™n *"), 0, 2)
        self.full_name_edit = self.create_input(
            "Nh·∫≠p h·ªç v√† t√™n"
        )
        layout.addWidget(self.full_name_edit, 0, 3)
        self.full_name_error = QLabel()
        self.full_name_error.setObjectName("errorLabel")
        self.full_name_error.setVisible(False)
        layout.addWidget(self.full_name_error, 1, 3)
        
        # Row 2
        layout.addWidget(self.create_label("Gi·ªõi t√≠nh *"), 1, 0)
        self.gender_combo = self.create_combo([
            gender.value for gender in Gender
        ])
        layout.addWidget(self.gender_combo, 1, 1)
        
        layout.addWidget(self.create_label("Ng√†y sinh *"), 1, 2)
        self.birth_date_edit = self.create_date_edit()
        layout.addWidget(self.birth_date_edit, 1, 3)
        
        # Row 3
        layout.addWidget(self.create_label("N∆°i c∆∞ tr√∫ *"), 2, 0)
        self.address_edit = self.create_input(
            "VD: TDP 1, P. B·∫Øc H·ªìng, TX. H·ªìng Lƒ©nh"
        )
        layout.addWidget(self.address_edit, 2, 1)
        
        layout.addWidget(self.create_label("Ph∆∞·ªùng/x√£ *"), 2, 2)
        self.ward_edit = self.create_input("VD: B·∫Øc H·ªìng")
        # Th√™m autocomplete cho ward
        self.ward_completer = QCompleter()
        self.ward_completer.setCaseSensitivity(Qt.CaseSensitivity.CaseInsensitive)
        self.ward_edit.setCompleter(self.ward_completer)
        layout.addWidget(self.ward_edit, 2, 3)
        # S·ª± ki·ªán t·ª± ƒë·ªông t√°ch ward t·ª´ address
        self.address_edit.editingFinished.connect(self.auto_extract_ward_from_address)
        
        # Row 4
        layout.addWidget(self.create_label("Ngh·ªÅ nghi·ªáp"), 3, 0)
        self.occupation_edit = self.create_input(
            "VD: N√¥ng d√¢n, Th·ª£ may, Lao ƒë·ªông t·ª± do"
        )
        layout.addWidget(self.occupation_edit, 3, 1)
        
        layout.addWidget(self.create_label("T·ªôi danh *"), 3, 2)
        self.crime_edit = self.create_input(
            "VD: Tr·ªôm c·∫Øp t√†i s·∫£n"
        )
        layout.addWidget(self.crime_edit, 3, 3)
        
    def setup_case_info_section(self, parent_layout):
        """Setup case information section."""
        section = self.create_section("üìã TH√îNG TIN √ÅN", parent_layout)
        layout = QGridLayout(section)
        layout.setSpacing(15)
        
        # Row 1
        layout.addWidget(self.create_label("Lo·∫°i √°n *"), 0, 0)
        # L·∫•y gi√° tr·ªã m·ªõi nh·∫•t t·ª´ enum CaseType
        from models.offender import CaseType
        self.case_type_combo = self.create_combo([
            case_type.value for case_type in CaseType
        ])
        layout.addWidget(self.case_type_combo, 0, 1)
        
        layout.addWidget(self.create_label("S·ªë b·∫£n √°n *"), 0, 2)
        self.sentence_number_edit = self.create_input("VD: S·ªë 15/2025/HS-ST, ng√†y 15/5/2025")
        layout.addWidget(self.sentence_number_edit, 0, 3)
        
        # Row 2
        layout.addWidget(self.create_label("Quy·∫øt ƒë·ªãnh THA *"), 1, 0)
        self.decision_number_edit = self.create_input("VD: S·ªë 15/2025/Qƒê-CA, ng√†y 29/5/2025")
        layout.addWidget(self.decision_number_edit, 1, 1, 1, 3)
        
    def setup_sentence_info_section(self, parent_layout):
        """Setup sentence information section."""
        section = self.create_section("‚è∞ TH√îNG TIN THI H√ÄNH √ÅN", parent_layout)
        layout = QGridLayout(section)
        layout.setSpacing(15)
        
        # Row 1
        layout.addWidget(self.create_label("Ng√†y b·∫Øt ƒë·∫ßu *"), 0, 0)
        self.start_date_input = self.create_date_edit()
        layout.addWidget(self.start_date_input, 0, 1)
        
        layout.addWidget(self.create_label("Th·ªùi gian TT (th√°ng) *"), 0, 2)
        self.duration_months_spin = self.create_spinbox(1, 60, 6)
        layout.addWidget(self.duration_months_spin, 0, 3)
        
        # Row 2
        layout.addWidget(self.create_label("ƒê∆∞·ª£c gi·∫£m (th√°ng)"), 1, 0)
        self.reduced_months_spin = self.create_spinbox(0, 12, 0)
        layout.addWidget(self.reduced_months_spin, 1, 1)
        
        layout.addWidget(self.create_label("Ng√†y ƒë∆∞·ª£c gi·∫£m"), 1, 2)
        self.reduction_date_input = self.create_date_edit()
        layout.addWidget(self.reduction_date_input, 1, 3)
        
        # Row 3
        layout.addWidget(self.create_label("S·ªë l·∫ßn gi·∫£m"), 2, 0)
        self.reduction_count_spin = self.create_spinbox(
            0, 10, 0
        )
        layout.addWidget(self.reduction_count_spin, 2, 1)
        
    def setup_calculation_section(self, parent_layout):
        """Setup calculation results section."""
        section = self.create_section("üßÆ T√çNH TO√ÅN T·ª∞ ƒê·ªòNG", parent_layout)
        layout = QGridLayout(section)
        layout.setSpacing(15)
        
        # Row 1
        layout.addWidget(self.create_label("Ng√†y ch·∫•p h√†nh xong:"), 0, 0)
        self.completion_date_label = self.create_result_label("Ch∆∞a t√≠nh")
        layout.addWidget(self.completion_date_label, 0, 1)
        
        layout.addWidget(self.create_label("Tr·∫°ng th√°i:"), 0, 2)
        self.status_label = self.create_result_label("Ch∆∞a x√°c ƒë·ªãnh")
        layout.addWidget(self.status_label, 0, 3)
        
        # Row 2
        layout.addWidget(self.create_label("S·ªë ng√†y c√≤n l·∫°i:"), 1, 0)
        self.days_remaining_label = self.create_result_label("Ch∆∞a t√≠nh")
        layout.addWidget(self.days_remaining_label, 1, 1)
        
        layout.addWidget(self.create_label("M·ª©c ƒë·ªô nguy c∆°:"), 1, 2)
        self.risk_level_label = self.create_result_label("Ch∆∞a ƒë√°nh gi√°")
        layout.addWidget(self.risk_level_label, 1, 3)
        
        # Row 3 - G·ª£i √Ω ƒë·ª£t gi·∫£m √°n ti·∫øp theo
        self.next_reduction_hint = QLabel()
        self.next_reduction_hint.setObjectName("hintLabel")
        self.next_reduction_hint.setVisible(False)
        layout.addWidget(self.next_reduction_hint, 2, 0, 1, 4)
        
    def setup_notes_section(self, parent_layout):
        """Setup notes section."""
        section = self.create_section("üìù GHI CH√ö", parent_layout)
        layout = QVBoxLayout(section)
        
        self.notes_edit = QTextEdit()
        self.notes_edit.setPlaceholderText("Nh·∫≠p ghi ch√∫ v·ªÅ ƒë·ªëi t∆∞·ª£ng...")
        self.notes_edit.setMaximumHeight(100)
        self.notes_edit.setObjectName("notesEdit")
        # X√≥a setStyleSheet inline, d√πng QSS cho QTextEdit#notesEdit
        layout.addWidget(self.notes_edit)
        
    def setup_action_bar(self, parent_layout):
        """Setup bottom action bar."""
        action_frame = QFrame()
        action_frame.setObjectName("actionBar")
        # X√≥a setStyleSheet inline, d√πng QSS
        # action_frame.setStyleSheet(...)
        action_layout = QHBoxLayout(action_frame)
        action_layout.setContentsMargins(30, 15, 30, 15)
        # Hi·ªáu ·ª©ng b√≥ng ƒë·ªï
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(16)
        shadow.setOffset(0, -2)
        shadow.setColor(QColor(0,0,0,40))
        action_frame.setGraphicsEffect(shadow)
        
        # Left side - Info
        info_label = QLabel("üí° L∆∞u √Ω: C√°c tr∆∞·ªùng c√≥ d·∫•u * l√† b·∫Øt bu·ªôc")
        info_label.setObjectName("infoLabel")
        # X√≥a setStyleSheet inline, d√πng QSS cho QLabel#infoLabel
        action_layout.addWidget(info_label)
        
        action_layout.addStretch()
        
        # Right side - Buttons
        self.cancel_btn = self.create_button("H·ª¶Y", "secondary")
        self.save_btn = self.create_button("L∆ØU", "primary")
        self.save_btn.setMinimumWidth(120)
        self.paste_auto_btn = QPushButton("üìã D√°n t·ª± ƒë·ªông")
        self.paste_auto_btn.setToolTip("T·ª± ƒë·ªông nh·∫≠n di·ªán v√† ƒëi·ªÅn d·ªØ li·ªáu t·ª´ clipboard")
        self.paste_auto_btn.clicked.connect(self.paste_auto_fill)
        self.import_file_btn = QPushButton("üìÇ Nh·∫≠p t·ª´ file")
        self.import_file_btn.setToolTip("Ch·ªçn file Excel, Word, PDF, TXT ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn d·ªØ li·ªáu")
        self.import_file_btn.clicked.connect(self.import_file_fill)
        self.import_image_btn = QPushButton("üñºÔ∏è Nh·∫≠p t·ª´ ·∫£nh")
        self.import_image_btn.setToolTip("Ch·ªçn ·∫£nh gi·∫•y t·ªù ƒë·ªÉ nh·∫≠n di·ªán v√† ƒëi·ªÅn d·ªØ li·ªáu (OCR)")
        self.import_image_btn.clicked.connect(self.import_image_fill)
        action_layout.addWidget(self.cancel_btn)
        action_layout.addWidget(self.save_btn)
        action_layout.addWidget(self.paste_auto_btn)
        action_layout.addWidget(self.import_file_btn)
        action_layout.addWidget(self.import_image_btn)
        
        parent_layout.addWidget(action_frame)
        
    def create_section(self, title: str, parent_layout):
        """Create a form section."""
        section = QGroupBox(title)
        section.setFont(QFont("Segoe UI", 14, QFont.Weight.Bold))
        section.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed
        )
        section.setObjectName("formSection")
        # X√≥a setStyleSheet inline, d√πng QSS cho QGroupBox#formSection
        parent_layout.addWidget(section)
        return section
        
    def create_label(self, text: str) -> QLabel:
        label = QLabel(text)
        label.setMinimumWidth(COMPONENT_SIZES['label_width'])
        label.setFont(QFont("Segoe UI", 13))
        return label

    def create_input(self, placeholder: str) -> QLineEdit:
        edit = QLineEdit()
        edit.setPlaceholderText(placeholder)
        edit.setMinimumWidth(COMPONENT_SIZES['input_width'])
        edit.setMinimumHeight(COMPONENT_SIZES['input_height'])
        edit.setFont(QFont("Segoe UI", 13))
        edit.setClearButtonEnabled(True)  # N√∫t X nh·ªè b√™n ph·∫£i
        edit.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed
        )
        return edit

    def create_combo(self, items: list) -> QComboBox:
        combo = QComboBox()
        combo.addItems(items)
        combo.setMinimumWidth(COMPONENT_SIZES['input_width'])
        combo.setMinimumHeight(COMPONENT_SIZES['input_height'])
        combo.setFont(QFont("Segoe UI", 13))
        combo.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed
        )
        return combo

    def create_date_edit(self) -> QDateEdit:
        date_edit = QDateEdit()
        date_edit.setDisplayFormat("dd/MM/yyyy")
        date_edit.setMinimumWidth(COMPONENT_SIZES['input_width'])
        date_edit.setMinimumHeight(COMPONENT_SIZES['input_height'])
        date_edit.setFont(QFont("Segoe UI", 13))
        date_edit.setCalendarPopup(True)
        date_edit.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed
        )
        return date_edit

    def create_spinbox(self, min_val: int, max_val: int, default: int) -> QSpinBox:
        spin = QSpinBox()
        spin.setRange(min_val, max_val)
        spin.setValue(default)
        spin.setMinimumWidth(COMPONENT_SIZES['input_width'])
        spin.setMinimumHeight(COMPONENT_SIZES['input_height'])
        spin.setFont(QFont("Segoe UI", 13))
        spin.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed
        )
        return spin

    def create_result_label(self, text: str) -> QLabel:
        """Create a result label."""
        label = QLabel(text)
        label.setFont(QFont("Segoe UI", 13, QFont.Weight.Bold))
        label.setObjectName("resultLabel")
        # X√≥a setStyleSheet inline, d√πng QSS cho QLabel#resultLabel
        return label
        
    def create_button(self, text: str, style: str = "primary") -> QPushButton:
        btn = QPushButton(text)
        if style == "primary":
            btn.setMinimumWidth(COMPONENT_SIZES['primary_button_width'])
            btn.setMinimumHeight(COMPONENT_SIZES['primary_button_height'])
        elif style == "secondary":
            btn.setMinimumWidth(COMPONENT_SIZES['secondary_button_width'])
            btn.setMinimumHeight(COMPONENT_SIZES['secondary_button_height'])
        else:
            btn.setMinimumWidth(COMPONENT_SIZES['button_width'])
            btn.setMinimumHeight(COMPONENT_SIZES['button_height'])
        btn.setFont(QFont("Segoe UI", 13, QFont.Weight.Bold))
        return btn
        
    def setup_connections(self):
        """Setup signal connections."""
        self.save_btn.clicked.connect(self.save_offender)
        self.cancel_btn.clicked.connect(self.cancel_edit)
        
        # Auto-calculate when relevant fields change
        self.start_date_input.dateChanged.connect(self.calculate_fields)
        self.duration_months_spin.valueChanged.connect(self.calculate_fields)
        self.reduced_months_spin.valueChanged.connect(self.calculate_fields)
        
        # Keyboard navigation: Enter chuy·ªÉn focus, Shift+Tab quay l·∫°i, Enter cu·ªëi form s·∫Ω l∆∞u
        self.case_number_edit.returnPressed.connect(lambda: self.full_name_edit.setFocus())
        self.full_name_edit.returnPressed.connect(lambda: self.gender_combo.setFocus())
        self.birth_date_edit.installEventFilter(self)
        self.address_edit.returnPressed.connect(lambda: self.ward_edit.setFocus())
        self.ward_edit.returnPressed.connect(lambda: self.occupation_edit.setFocus())
        self.occupation_edit.returnPressed.connect(lambda: self.crime_edit.setFocus())
        self.crime_edit.returnPressed.connect(lambda: self.case_type_combo.setFocus())
        self.sentence_number_edit.returnPressed.connect(lambda: self.decision_number_edit.setFocus())
        self.decision_number_edit.returnPressed.connect(lambda: self.start_date_input.setFocus())
        self.start_date_input.installEventFilter(self)
        self.duration_months_spin.installEventFilter(self)
        self.reduced_months_spin.installEventFilter(self)
        self.reduction_date_input.installEventFilter(self)
        self.reduction_count_spin.installEventFilter(self)
        self.notes_edit.installEventFilter(self)
        
        self.case_number_edit.editingFinished.connect(self.auto_fill_by_case_number)
        self.full_name_edit.editingFinished.connect(self.auto_fill_by_full_name)
        # Chu·∫©n h√≥a & s·ª≠a l·ªói ch√≠nh t·∫£ khi r·ªùi kh·ªèi c√°c tr∆∞·ªùng text
        for edit in [self.full_name_edit, self.address_edit, self.ward_edit, self.occupation_edit, self.crime_edit]:
            edit.editingFinished.connect(lambda e=edit: self.normalize_and_autocorrect(e))
        
    def load_offender(self, offender_id: int):
        """Load offender data for editing."""
        try:
            offender = self.offender_service.get_offender(offender_id)
            if offender:
                self.current_offender_id = offender_id
                self.populate_form(offender)
                self.calculate_fields()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {str(e)}")
            
    def populate_form(self, offender: Offender):
        """Populate form with offender data."""
        # Basic info
        self.case_number_edit.setText(offender.case_number)
        self.full_name_edit.setText(offender.full_name)
        self.gender_combo.setCurrentText(offender.gender.value)
        
        if offender.birth_date:
            self.birth_date_edit.setDate(QDate(offender.birth_date.year, 
                                              offender.birth_date.month, 
                                              offender.birth_date.day))
        
        self.address_edit.setText(offender.address)
        self.ward_edit.setText(offender.ward)
        self.occupation_edit.setText(offender.occupation)
        self.crime_edit.setText(offender.crime)
        self.case_type_combo.setCurrentText(offender.case_type.value)
        
        # Case info
        self.sentence_number_edit.setText(offender.sentence_number)
        self.decision_number_edit.setText(offender.decision_number)
        
        if offender.start_date:
            self.start_date_input.setDate(QDate(offender.start_date.year, 
                                             offender.start_date.month, 
                                             offender.start_date.day))
        
        self.duration_months_spin.setValue(offender.duration_months)
        self.reduced_months_spin.setValue(offender.reduced_months)
        
        if offender.reduction_date:
            self.reduction_date_input.setDate(QDate(offender.reduction_date.year, 
                                                 offender.reduction_date.month, 
                                                 offender.reduction_date.day))
        
        self.reduction_count_spin.setValue(offender.reduction_count)
        self.notes_edit.setPlainText(offender.notes)
        
    def save_offender(self):
        """Save offender data."""
        try:
            if not self.validate_form():
                return
                
            data = self.collect_form_data()
            
            if self.current_offender_id:
                # Update existing offender
                success = self.offender_service.update_offender(self.current_offender_id, data)
                if success:
                    QMessageBox.information(self, "Th√†nh c√¥ng", "C·∫≠p nh·∫≠t ƒë·ªëi t∆∞·ª£ng th√†nh c√¥ng!")
                    self.offender_saved.emit(self.current_offender_id)
                else:
                    QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë·ªëi t∆∞·ª£ng!")
            else:
                # Create new offender
                offender = self.offender_service.create_offender(data)
                QMessageBox.information(self, "Th√†nh c√¥ng", "Th√™m ƒë·ªëi t∆∞·ª£ng th√†nh c√¥ng!")
                self.offender_saved.emit(offender.id)
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u ƒë·ªëi t∆∞·ª£ng: {str(e)}")
            
    def validate_form(self) -> bool:
        """Validate form data v√† hi·ªÉn th·ªã l·ªói tr·ª±c quan."""
        valid = True
        # Reset l·ªói
        self.case_number_edit.setProperty("error", False)
        self.full_name_edit.setProperty("error", False)
        self.gender_combo.setProperty("error", False)
        self.birth_date_edit.setProperty("error", False)
        self.address_edit.setProperty("error", False)
        self.ward_edit.setProperty("error", False)
        self.occupation_edit.setProperty("error", False)
        self.crime_edit.setProperty("error", False)
        self.case_type_combo.setProperty("error", False)
        self.sentence_number_edit.setProperty("error", False)
        self.decision_number_edit.setProperty("error", False)
        self.start_date_input.setProperty("error", False)
        self.duration_months_spin.setProperty("error", False)
        self.reduced_months_spin.setProperty("error", False)
        self.reduction_date_input.setProperty("error", False)
        self.reduction_count_spin.setProperty("error", False)
        self.notes_edit.setProperty("error", False)
        self.case_number_error.setVisible(False)
        self.full_name_error.setVisible(False)
        
        # Validate t·ª´ng tr∆∞·ªùng
        if not self.case_number_edit.text().strip():
            self.case_number_edit.setProperty("error", True)
            self.case_number_error.setText("S·ªë h·ªì s∆° kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            self.case_number_error.setVisible(True)
            valid = False
        if not self.full_name_edit.text().strip():
            self.full_name_edit.setProperty("error", True)
            self.full_name_error.setText("H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            self.full_name_error.setVisible(True)
            valid = False
        if not self.gender_combo.currentText():
            self.gender_combo.setProperty("error", True)
            self.gender_combo.setCurrentIndex(0) # Reset to default
            valid = False
        if not self.birth_date_edit.date().toPyDate():
            self.birth_date_edit.setProperty("error", True)
            valid = False
        if not self.address_edit.text().strip():
            self.address_edit.setProperty("error", True)
            valid = False
        if not self.ward_edit.text().strip():
            self.ward_edit.setProperty("error", True)
            valid = False
        if not self.occupation_edit.text().strip():
            self.occupation_edit.setProperty("error", True)
            valid = False
        if not self.crime_edit.text().strip():
            self.crime_edit.setProperty("error", True)
            valid = False
        if not self.case_type_combo.currentText():
            self.case_type_combo.setProperty("error", True)
            self.case_type_combo.setCurrentIndex(0) # Reset to default
            valid = False
        if not self.sentence_number_edit.text().strip():
            self.sentence_number_edit.setProperty("error", True)
            valid = False
        if not self.decision_number_edit.text().strip():
            self.decision_number_edit.setProperty("error", True)
            valid = False
        if self.duration_months_spin.value() <= 0:
            self.duration_months_spin.setProperty("error", True)
            valid = False
            
        if not valid:
            QMessageBox.warning(self, "L·ªói validation", "Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tr∆∞·ªùng c√≥ d·∫•u * v√† nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.")
            return False
            
        return True
        
    def collect_form_data(self) -> Dict[str, Any]:
        """Collect data from form."""
        return {
            'case_number': self.case_number_edit.text().strip(),
            'full_name': self.full_name_edit.text().strip(),
            'gender': Gender(self.gender_combo.currentText()),
            'birth_date': self.birth_date_edit.date().toPyDate(),
            'address': self.address_edit.text().strip(),
            'ward': self.ward_edit.text().strip(),
            'occupation': self.occupation_edit.text().strip(),
            'crime': self.crime_edit.text().strip(),
            'case_type': CaseType(self.case_type_combo.currentText()),
            'sentence_number': self.sentence_number_edit.text().strip(),
            'decision_number': self.decision_number_edit.text().strip(),
            'start_date': self.start_date_input.date().toPyDate(),
            'duration_months': self.duration_months_spin.value(),
            'reduced_months': self.reduced_months_spin.value(),
            'reduction_date': self.reduction_date_input.date().toPyDate(),
            'reduction_count': self.reduction_count_spin.value(),
            'notes': self.notes_edit.toPlainText().strip()
        }
        
    def calculate_fields(self):
        """Calculate derived fields."""
        try:
            # Create temporary offender for calculation
            temp_data = self.collect_form_data()
            temp_offender = Offender(**temp_data)
            # Update calculated fields
            if temp_offender.completion_date:
                self.completion_date_label.setText(temp_offender.completion_date.strftime("%d/%m/%Y"))
            else:
                self.completion_date_label.setText("Ch∆∞a t√≠nh")
            # Thay ƒë·ªïi tr·∫°ng th√°i label b·∫±ng objectName ƒë·ªÉ QSS nh·∫≠n di·ªán
            status_val = temp_offender.status.value if hasattr(temp_offender.status, 'value') else str(temp_offender.status)
            if status_val == "S·∫Øp k·∫øt th√∫c":
                self.status_label.setObjectName("statusLabelWarning")
                self.status_label.setText("<img src='assets/icons/warning.svg' width='18' style='vertical-align:middle;'/> <b style='color:#FF9800'>S·∫Øp k·∫øt th√∫c</b>")
            elif status_val == "ƒê√£ ho√†n th√†nh":
                self.status_label.setObjectName("statusLabelSuccess")
                self.status_label.setText("<b style='color:#4CAF50'>ƒê√£ ho√†n th√†nh</b>")
            elif status_val == "Vi ph·∫°m":
                self.status_label.setObjectName("statusLabelError")
                self.status_label.setText("<img src='assets/icons/violation.svg' width='18' style='vertical-align:middle;'/> <b style='color:#F44336'>Vi ph·∫°m</b>")
            else:
                self.status_label.setObjectName("statusLabelInfo")
                self.status_label.setText(status_val)
            self.days_remaining_label.setText(f"{temp_offender.days_remaining} ng√†y")
            risk_val = temp_offender.risk_level.value if hasattr(temp_offender.risk_level, 'value') else str(temp_offender.risk_level)
            self.risk_level_label.setText(risk_val)
            # G·ª£i √Ω ƒë·ª£t gi·∫£m √°n ti·∫øp theo
            next_reduction = temp_offender.get_next_reduction_date()
            if next_reduction:
                # G·ª£i √Ω c√°c m·ªëc 30/4, 2/9, 25/12 n·∫øu g·∫ßn c√°c m·ªëc n√†y (¬±7 ng√†y)
                import datetime
                mocs = [(30,4), (2,9), (25,12)]
                hint = ""
                for d,m in mocs:
                    try:
                        moc_date = next_reduction.replace(day=d, month=m)
                        delta = abs((next_reduction - moc_date).days)
                        if delta <= 7:
                            hint = f" (G·ª£i √Ω ƒë·ª£t: {moc_date.strftime('%d/%m')})"
                            break
                    except Exception:
                        continue
                self.next_reduction_hint.setText(f"üõà ƒê·ª£t gi·∫£m √°n ti·∫øp theo: {next_reduction.strftime('%d/%m/%Y')}{hint}")
                self.next_reduction_hint.setVisible(True)
            else:
                self.next_reduction_hint.setVisible(False)
        except Exception:
            # If calculation fails, show default values
            self.completion_date_label.setText("Ch∆∞a t√≠nh")
            self.status_label.setText("Ch∆∞a x√°c ƒë·ªãnh")
            self.status_label.setStyleSheet("color: #1976D2; background-color: #E3F2FD; border: 1px solid #BBDEFB; border-radius: 6px; padding: 8px 12px; min-height: 45px;")
            self.days_remaining_label.setText("Ch∆∞a t√≠nh")
            self.risk_level_label.setText("Ch∆∞a ƒë√°nh gi√°")
            self.next_reduction_hint.setVisible(False)
            
    def cancel_edit(self):
        """Cancel editing."""
        self.offender_cancelled.emit()
        
    def clear_form(self):
        """Clear form for new entry."""
        self.current_offender_id = None
        
        # Clear all fields
        self.case_number_edit.clear()
        self.full_name_edit.clear()
        self.gender_combo.setCurrentIndex(0)
        self.birth_date_edit.setDate(QDate.currentDate())
        self.address_edit.clear()
        self.ward_edit.clear()
        self.occupation_edit.clear()
        self.crime_edit.clear()
        self.case_type_combo.setCurrentIndex(0)
        
        self.sentence_number_edit.clear()
        self.decision_number_edit.clear()
        self.start_date_input.setDate(QDate.currentDate())
        self.duration_months_spin.setValue(6)
        self.reduced_months_spin.setValue(0)
        self.reduction_date_input.setDate(QDate.currentDate())
        self.reduction_count_spin.setValue(0)
        self.notes_edit.clear()
        
        # Reset calculated fields
        self.completion_date_label.setText("Ch∆∞a t√≠nh")
        self.status_label.setText("Ch∆∞a x√°c ƒë·ªãnh")
        self.status_label.setStyleSheet("color: #1976D2; background-color: #E3F2FD; border: 1px solid #BBDEFB; border-radius: 6px; padding: 8px 12px; min-height: 45px;")
        self.days_remaining_label.setText("Ch∆∞a t√≠nh")
        self.risk_level_label.setText("Ch∆∞a ƒë√°nh gi√°")
        self.next_reduction_hint.setVisible(False) 

    def auto_extract_ward_from_address(self):
        """T·ª± ƒë·ªông t√°ch ph∆∞·ªùng/x√£ t·ª´ ƒë·ªãa ch·ªâ n·∫øu tr∆∞·ªùng ward ƒëang tr·ªëng."""
        if self.ward_edit.text().strip():
            return
        address = self.address_edit.text().strip()
        import re
        # Regex t√¨m ph∆∞·ªùng/x√£ ph·ªï bi·∫øn
        match = re.search(r"(?:P\.?|Ph∆∞·ªùng|X\.?|X√£)\s*([\w√Ä-·ªπ\s]+)", address)
        if match:
            ward = match.group(1).strip()
            self.ward_edit.setText(ward)
        else:
            # N·∫øu kh√¥ng c√≥, th·ª≠ t√°ch ph·∫ßn sau d·∫•u ph·∫©y cu·ªëi c√πng
            parts = [p.strip() for p in address.split(',') if p.strip()]
            if parts:
                self.ward_edit.setText(parts[-1])
    def refresh_ward_completer(self):
        """L·∫•y danh s√°ch ward t·ª´ database, file chu·∫©n (wards.json), v√† c·∫≠p nh·∫≠t completer (∆∞u ti√™n ph·ªï bi·∫øn nh·∫•t l√™n ƒë·∫ßu)."""
        try:
            offenders = self.offender_service.get_all_offenders()
            ward_freq = {}
            for offender in offenders:
                if hasattr(offender, 'ward') and offender.ward:
                    w = offender.ward.strip()
                    if w:
                        ward_freq[w] = ward_freq.get(w, 0) + 1
            # ƒê·ªçc danh s√°ch chu·∫©n t·ª´ wards.json n·∫øu c√≥
            wards_file = os.path.join(os.path.dirname(__file__), '../assets/wards.json')
            wards_list = []
            if os.path.exists(wards_file):
                with open(wards_file, encoding='utf-8') as f:
                    wards_list = json.load(f)
            # G·ªôp danh s√°ch, ∆∞u ti√™n chu·∫©n, sau ƒë√≥ c√°c ward ƒë√£ nh·∫≠p
            all_wards = list(wards_list)
            for w in ward_freq:
                if w not in all_wards:
                    all_wards.append(w)
            # S·∫Øp x·∫øp: ph·ªï bi·∫øn nh·∫•t l√™n ƒë·∫ßu
            all_wards = sorted(all_wards, key=lambda x: -ward_freq.get(x, 0))
            self.ward_completer.setModel(QStringListModel(all_wards))
        except Exception:
            pass

    def showEvent(self, event):
        super().showEvent(event)
        self.refresh_ward_completer()

    def eventFilter(self, obj, event):
        from PyQt6.QtCore import QEvent, Qt
        if obj == self.ward_edit and event.type() == QEvent.Type.FocusOut:
            # Khi r·ªùi kh·ªèi tr∆∞·ªùng ward, ki·ªÉm tra g·∫ßn ƒë√∫ng
            text = self.ward_edit.text().strip()
            if text:
                model = self.ward_completer.model()
                if model:
                    from difflib import get_close_matches
                    all_wards = [model.data(model.index(i)) for i in range(model.rowCount())]
                    matches = get_close_matches(text, all_wards, n=1, cutoff=0.85)
                    if matches:
                        self.ward_edit.setText(matches[0])
        # B·ªï sung cho QComboBox, QDateEdit, QSpinBox: Enter chuy·ªÉn focus
        if event.type() == QEvent.Type.KeyPress and event.key() == Qt.Key.Key_Return:
            if obj == self.gender_combo:
                self.birth_date_edit.setFocus()
                return True
            if obj == self.birth_date_edit:
                self.address_edit.setFocus()
                return True
            if obj == self.address_edit:
                self.ward_edit.setFocus()
                return True
            if obj == self.ward_edit:
                self.occupation_edit.setFocus()
                return True
            if obj == self.occupation_edit:
                self.crime_edit.setFocus()
                return True
            if obj == self.crime_edit:
                self.case_type_combo.setFocus()
                return True
            if obj == self.case_type_combo:
                self.sentence_number_edit.setFocus()
                return True
            if obj == self.sentence_number_edit:
                self.decision_number_edit.setFocus()
                return True
            if obj == self.decision_number_edit:
                self.start_date_input.setFocus()
                return True
            if obj == self.start_date_input:
                self.duration_months_spin.setFocus()
                return True
            if obj == self.duration_months_spin:
                self.reduced_months_spin.setFocus()
                return True
            if obj == self.reduced_months_spin:
                self.reduction_date_input.setFocus()
                return True
            if obj == self.reduction_date_input:
                self.reduction_count_spin.setFocus()
                return True
            if obj == self.reduction_count_spin:
                self.notes_edit.setFocus()
                return True
        return super().eventFilter(obj, event) 

    def paste_auto_fill(self):
        """T·ª± ƒë·ªông nh·∫≠n di·ªán v√† ƒëi·ªÅn d·ªØ li·ªáu t·ª´ clipboard (text)."""
        import pyperclip
        text = pyperclip.paste()
        self.smart_fill_from_text(text)
    def import_file_fill(self):
        """Ch·ªçn file (Excel, Word, PDF, TXT) v√† t·ª± ƒë·ªông ƒëi·ªÅn d·ªØ li·ªáu."""
        file_path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn file d·ªØ li·ªáu", "", "All Files (*.xlsx *.xls *.csv *.docx *.pdf *.txt)")
        if not file_path:
            return
        ext = file_path.split('.')[-1].lower()
        text = ""
        try:
            if ext in ["xlsx", "xls", "csv"]:
                df = pd.read_excel(file_path) if ext != "csv" else pd.read_csv(file_path)
                text = "\n".join([str(val) for val in df.values.flatten() if pd.notnull(val)])
            elif ext == "docx":
                doc = docx.Document(file_path)
                text = "\n".join([p.text for p in doc.paragraphs])
            elif ext == "pdf":
                with pdfplumber.open(file_path) as pdf:
                    text = "\n".join(page.extract_text() or '' for page in pdf.pages)
            elif ext == "txt":
                with open(file_path, encoding='utf-8') as f:
                    text = f.read()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")
            return
        self.smart_fill_from_text(text)
    def import_image_fill(self):
        """Ch·ªçn ·∫£nh gi·∫•y t·ªù, d√πng OCR nh·∫≠n di·ªán v√† ƒëi·ªÅn d·ªØ li·ªáu."""
        file_path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn ·∫£nh gi·∫•y t·ªù", "", "Image Files (*.png *.jpg *.jpeg *.bmp)")
        if not file_path:
            return
        try:
            img = Image.open(file_path)
            text = pytesseract.image_to_string(img, lang='vie')
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ nh·∫≠n di·ªán ·∫£nh: {e}")
            return
        self.smart_fill_from_text(text)
    def smart_fill_from_text(self, text):
        """Ph√¢n t√≠ch text, mapping th√¥ng minh v√†o c√°c tr∆∞·ªùng form, ∆∞u ti√™n AI/NER v√† fuzzy matching."""
        # 1. Nh·∫≠n di·ªán th·ª±c th·ªÉ b·∫±ng underthesea
        entities = ner(text)
        field_map = {
            'PERSON': 'full_name',
            'DATE': 'birth_date',
            'LOC': 'address',
            # ... c√≥ th·ªÉ m·ªü r·ªông mapping ...
        }
        mapped = {}
        for ent in entities:
            value = ent[0].strip()
            label = ent[3]
            field = field_map.get(label)
            if field:
                if field not in mapped:
                    mapped[field] = []
                mapped[field].append(value)
        # 2. Fuzzy matching cho c√°c tr∆∞·ªùng ƒë·∫∑c th√π
        # V√≠ d·ª•: mapping t·ªôi danh, lo·∫°i √°n, ph∆∞·ªùng/x√£
        # L·∫•y danh s√°ch chu·∫©n t·ª´ completer/model
        def fuzzy_field(field, value, model):
            if not value or not model:
                return value
            choices = [model.data(model.index(i)) for i in range(model.rowCount())]
            match, score = process.extractOne(value, choices)
            if score >= 85:
                return match
            # N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h·ªèi ng∆∞·ªùi d√πng
            if score >= 60:
                chosen, ok = QInputDialog.getItem(self, f"Ch·ªçn {field}", f"AI nh·∫≠n di·ªán: '{value}'. Ch·ªçn gi√° tr·ªã ƒë√∫ng:", choices, editable=True)
                if ok:
                    return chosen
            return value
        # 3. Mapping v√†o form, ∆∞u ti√™n x√°c su·∫•t cao, h·ªèi ng∆∞·ªùi d√πng n·∫øu nhi·ªÅu kh·∫£ nƒÉng
        for field, vals in mapped.items():
            val = vals[0]
            if len(vals) > 1:
                val, ok = QInputDialog.getItem(self, f"Ch·ªçn {field}", f"AI nh·∫≠n di·ªán nhi·ªÅu gi√° tr·ªã cho {field}. Ch·ªçn ƒë√∫ng:", vals, editable=True)
                if not ok:
                    continue
            if field == 'full_name' and hasattr(self, 'full_name_edit'):
                self.full_name_edit.setText(val)
            elif field == 'birth_date' and hasattr(self, 'birth_date_edit'):
                # Chu·∫©n h√≥a ng√†y th√°ng
                import re
                from datetime import datetime
                date_val = val
                # Nh·∫≠n di·ªán dd/mm/yyyy ho·∫∑c yyyy-mm-dd
                m = re.search(r'(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})', date_val)
                if m:
                    try:
                        d = m.group(1).replace('-', '/').replace('.', '/')
                        dt = datetime.strptime(d, '%d/%m/%Y') if len(d.split('/')[2]) == 4 else datetime.strptime(d, '%d/%m/%y')
                        self.birth_date_edit.setDate(QDate(dt.year, dt.month, dt.day))
                    except Exception:
                        pass
            elif field == 'address' and hasattr(self, 'address_edit'):
                self.address_edit.setText(val)
        # Fuzzy cho c√°c tr∆∞·ªùng ƒë·∫∑c th√π
        # T·ªôi danh
        if hasattr(self, 'crime_edit'):
            model = getattr(self, 'crime_edit').completer().model() if getattr(self, 'crime_edit').completer() else None
            crime_val = fuzzy_field('T·ªôi danh', self.crime_edit.text(), model)
            self.crime_edit.setText(crime_val)
        # Lo·∫°i √°n
        if hasattr(self, 'case_type_combo'):
            model = self.case_type_combo.model() if self.case_type_combo else None
            case_type_val = fuzzy_field('Lo·∫°i √°n', self.case_type_combo.currentText(), model)
            self.case_type_combo.setCurrentText(case_type_val)
        # Ph∆∞·ªùng/x√£
        if hasattr(self, 'ward_edit'):
            model = getattr(self, 'ward_edit').completer().model() if getattr(self, 'ward_edit').completer() else None
            ward_val = fuzzy_field('Ph∆∞·ªùng/x√£', self.ward_edit.text(), model)
            self.ward_edit.setText(ward_val)
    def auto_fill_by_case_number(self):
        """N·∫øu nh·∫≠p s·ªë h·ªì s∆° tr√πng v·ªõi b·∫£n ghi c≈©, t·ª± ƒë·ªông ƒëi·ªÅn c√°c tr∆∞·ªùng c√≤n l·∫°i."""
        case_number = self.case_number_edit.text().strip()
        if not case_number:
            return
        offenders = self.offender_service.get_all_offenders()
        for offender in offenders:
            if offender.case_number == case_number:
                self.populate_form(offender)
                break
    def auto_fill_by_full_name(self):
        """N·∫øu nh·∫≠p h·ªç t√™n tr√πng v·ªõi b·∫£n ghi c≈©, g·ª£i √Ω ƒëi·ªÅn c√°c tr∆∞·ªùng c√≤n l·∫°i."""
        full_name = self.full_name_edit.text().strip()
        if not full_name:
            return
        offenders = self.offender_service.get_all_offenders()
        for offender in offenders:
            if offender.full_name.lower() == full_name.lower():
                # G·ª£i √Ω ƒëi·ªÅn c√°c tr∆∞·ªùng c√≤n l·∫°i (kh√¥ng ghi ƒë√® h·ªç t√™n)
                self.gender_combo.setCurrentText(offender.gender.value if hasattr(offender.gender, 'value') else str(offender.gender))
                if offender.birth_date:
                    self.birth_date_edit.setDate(QDate(offender.birth_date.year, offender.birth_date.month, offender.birth_date.day))
                self.address_edit.setText(offender.address)
                self.ward_edit.setText(offender.ward)
                self.occupation_edit.setText(offender.occupation)
                self.crime_edit.setText(offender.crime)
                self.case_type_combo.setCurrentText(offender.case_type.value if hasattr(offender.case_type, 'value') else str(offender.case_type))
                self.sentence_number_edit.setText(offender.sentence_number)
                self.decision_number_edit.setText(offender.decision_number)
                break
    def normalize_and_autocorrect(self, edit):
        """Chu·∫©n h√≥a v√† s·ª≠a l·ªói ch√≠nh t·∫£ cho tr∆∞·ªùng text khi r·ªùi kh·ªèi tr∆∞·ªùng."""
        text = edit.text().strip()
        if not text:
            return
        spell = Speller(lang='vi')
        # Vi·∫øt hoa ƒë·∫ßu d√≤ng, lo·∫°i b·ªè k√Ω t·ª± th·ª´a, s·ª≠a l·ªói ch√≠nh t·∫£
        text = text.capitalize()
        text = spell(text)
        edit.setText(text)
    # H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t th∆∞ vi·ªán c·∫ßn thi·∫øt
    '''
    # ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng t·ª± ƒë·ªông h√≥a nh·∫≠p li·ªáu th√¥ng minh, h√£y c√†i c√°c th∆∞ vi·ªán sau:
    pip install pandas openpyxl python-docx pdfplumber pillow pytesseract autocorrect pyperclip
    # N·∫øu d√πng OCR ti·∫øng Vi·ªát, c·∫ßn c√†i th√™m g√≥i ng√¥n ng·ªØ cho Tesseract:
    # https://github.com/tesseract-ocr/tessdata/blob/main/vie.traineddata
    ''' 